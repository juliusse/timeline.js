/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/index.js":
/*!*********************!*\
  !*** ./js/index.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const TimelineJs = {\r\n    Timeline: __webpack_require__(/*! ./timeline */ \"./js/timeline.js\"),\r\n    TimelineEntry: __webpack_require__(/*! ./timelineEntry */ \"./js/timelineEntry.js\"),\r\n    Visualisations: __webpack_require__(/*! ./visualisations/ */ \"./js/visualisations/index.js\")\r\n};\r\n\r\nmodule.exports = TimelineJs;\r\n\n\n//# sourceURL=webpack:///./js/index.js?");

/***/ }),

/***/ "./js/timeline.js":
/*!************************!*\
  !*** ./js/timeline.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿/*\n\nAuthor:\n    Julius Seltenheim (mail@julius-seltenheim.com)\n    \n*/\n\nconst { VerticalSmallBar, VerticalBigBar, VerticalMinimal, VerticalGroupedByColor} = __webpack_require__(/*! ./visualisations/ */ \"./js/visualisations/index.js\");\n\nTimeline.Visualisations = {\n    VerticalSmallBar: 1,\n    VerticalBigBar: 2,\n    VerticalMinimal: 3,\n    VerticalGroupedByColor: 4,\n}\n\n\nvar js = {};\n\nvar defaultConfig = {};\n\nTimeline.prototype.defaultConfig = defaultConfig;\n\n//Timeline stuff\n\nfunction Timeline(_fromYear, _config) {\n    //init config\n    this.config = !_config ? this.defaultConfig : _config;\n\n    this.fromYear = _fromYear;\n    this.visualisations = [];\n    this.timelineEntries = [];\n}\n\nTimeline.prototype.addVisualisation = function (_visualisationType, _htmlElement, _visualisationConfig) {\n    var vis = null;\n    if (_visualisationType == Timeline.Visualisations.VerticalSmallBar) {\n        vis = new VerticalSmallBar(this, _htmlElement, _visualisationConfig);\n    } else if (_visualisationType == Timeline.Visualisations.VerticalBigBar) {\n        vis = new VerticalBigBar(this, _htmlElement, _visualisationConfig);\n    } else if (_visualisationType == Timeline.Visualisations.VerticalMinimal) {\n        vis = new VerticalMinimal(this, _htmlElement, _visualisationConfig);\n    } else if (_visualisationType == Timeline.Visualisations.VerticalGroupedByColor) {\n        vis = new VerticalGroupedByColor(this, _htmlElement, _visualisationConfig);\n    }\n\n    if (vis != null) {\n        this.visualisations.push(vis);\n        return vis;\n    }\n\n    throw \"Unrecognized Visualisation\";\n}\n\nTimeline.prototype.update = function () {\n    for (var index in this.visualisations) {\n        this.visualisations[index].update();\n    }\n}\n\n\n// getter\n\nTimeline.prototype.getFromYear = function () {\n    return this.fromYear;\n}\n\nTimeline.prototype.getLocation = function () {\n    return this.location;\n}\n\nTimeline.prototype.getTimelineEntries = function () {\n    return this.timelineEntries;\n}\n\n\n// timelineEntry related\nTimeline.prototype.getEntriesInTimeRange = function (fromDate, toDate, excludedEntry) {\n    var resultList = [];\n    for (var index in this.timelineEntries) {\n        var timelineEntry = this.timelineEntries[index];\n        if ((timelineEntry.fromDate >= fromDate && timelineEntry.fromDate <= toDate) ||\n            (timelineEntry.toDate >= fromDate && timelineEntry.toDate <= toDate) ||\n            (timelineEntry.fromDate < fromDate && timelineEntry.toDate > toDate)) {\n            if (timelineEntry != excludedEntry)\n                resultList.push(timelineEntry);\n        }\n    }\n\n    return resultList;\n}\n\n\nTimeline.prototype.getTakenLevelsInTimeRange = function (fromDate, toDate, excludedEntry) {\n    var entries = this.getEntriesInTimeRange(fromDate, toDate, excludedEntry);\n    var result = [];\n\n    for (var index in entries) {\n        var timelineEntry = entries[index];\n        if (result.indexOf(timelineEntry.level) == -1)\n            result.push(timelineEntry.level);\n    }\n\n    return result;\n}\n\nTimeline.prototype.addTimelineEntry = function (timelineEntry) {\n    this.timelineEntries.push(timelineEntry);\n    timelineEntry.addListener(this);\n    for (var index in this.visualisations) {\n        this.visualisations[index].onNewTimelineEntry(timelineEntry);\n    }\n}\n\n\n/*\n * TimelineEntry Listener implementation\n */\nTimeline.prototype.onHTMLElementToTriggerHoverAdded = function (timelineEntry, htmlElement) {\n    for (var index in this.visualisations) {\n        this.visualisations[index].onHTMLElementToTriggerHoverAdded(timelineEntry, htmlElement);\n    }\n}\n\nmodule.exports = Timeline;\n\n\n//# sourceURL=webpack:///./js/timeline.js?");

/***/ }),

/***/ "./js/timelineEntry.js":
/*!*****************************!*\
  !*** ./js/timelineEntry.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("﻿/*\n\nAuthor:\n    Julius Seltenheim (mail@julius-seltenheim.com)\n    \n*/\n\n//TimelineEntry stuff\n\n\nfunction TimelineEntry(_title, _fromDate, _toDate, _color) {\n    this.title = _title;\n    this.fromDate = _fromDate;\n    this.toDate = _toDate;\n    this.color = _color;\n    this.level = 0;\n    this.listeners = [];\n    this.highlightingHtmlElements = [];\n}\n\nTimelineEntry.prototype.getHash = function () {\n    return this.title + \"_\" + this.fromDate.getTime() + \"_\" + this.toDate.getTime();\n}\n\nTimelineEntry.prototype.addListener = function (listener) {\n    this.listeners.push(listener);\n}\n\nTimelineEntry.prototype.addHTMLElementToTriggerHover = function (hTMLElement) {\n    this.highlightingHtmlElements.push(hTMLElement);\n    for (var index in this.listeners) {\n        this.listeners[index].onHTMLElementToTriggerHoverAdded(this, hTMLElement);\n    }\n\n}\n\nmodule.exports = TimelineEntry;\n\n\n//# sourceURL=webpack:///./js/timelineEntry.js?");

/***/ }),

/***/ "./js/tooltip.js":
/*!***********************!*\
  !*** ./js/tooltip.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("﻿/*\n\nAuthor:\n    Julius Seltenheim (mail@julius-seltenheim.com)\n    \n    Tooltip is right now a single instance class.\n    When another instance is created, the old one will be destroyed\n*/\n\nvar jsTimelineTooltip = null;\n\n\nfunction Tooltip(event, text) {\n    //check if tooltip exists\n    this.destroyExistingTooltip();\n    jsTimelineTooltip = this;\n    this.div = this.createDiv();\n    \n\n    var offsetDistance = 20;\n\n    var x = event.pageX;\n    var y = event.pageY;\n\n    this.div.style.top = y + 'px';\n    this.div.style.left = (x + 10) + 'px';\n\n    this.div.innerHTML = text;\n\n    document.getElementsByTagName(\"body\")[0].appendChild(this.div);\n}\n\nTooltip.prototype.createDiv = function () {\n    var div = document.createElement(\"div\");\n    div.style.position = \"absolute\";\n    div.style.display = 'block';\n    div.style.backgroundColor = \"black\";\n    div.style.color = \"white\";\n    div.style.font = \"Arial\";\n    div.style.fontSize = \"10px\";\n    div.style.padding = \"3px\";\n    \n    \n    return div;\n}\n\nTooltip.prototype.destroyExistingTooltip = function () {\n    if (jsTimelineTooltip != null) {\n        document.getElementsByTagName(\"body\")[0].removeChild(jsTimelineTooltip.div);\n    }\n    jsTimelineTooltip = null;\n}\n\nmodule.exports = Tooltip;\n\n//# sourceURL=webpack:///./js/tooltip.js?");

/***/ }),

/***/ "./js/visualisations/index.js":
/*!************************************!*\
  !*** ./js/visualisations/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = {\r\n    VerticalBigBar: __webpack_require__(/*! ./verticalBigBar */ \"./js/visualisations/verticalBigBar.js\"),\r\n    VerticalGroupedByColor: __webpack_require__(/*! ./verticalGroupedByColor */ \"./js/visualisations/verticalGroupedByColor.js\"),\r\n    VerticalMinimal: __webpack_require__(/*! ./verticalMinimal */ \"./js/visualisations/verticalMinimal.js\"),\r\n    VerticalSmallBar: __webpack_require__(/*! ./verticalSmallBar */ \"./js/visualisations/verticalSmallBar.js\"),\r\n}\n\n//# sourceURL=webpack:///./js/visualisations/index.js?");

/***/ }),

/***/ "./js/visualisations/verticalBigBar.js":
/*!*********************************************!*\
  !*** ./js/visualisations/verticalBigBar.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿const {Visualisation} = __webpack_require__(/*! ./visualisation */ \"./js/visualisations/visualisation.js\");\nconst Tooltip = __webpack_require__(/*! ../tooltip */ \"./js/tooltip.js\");\n\nvar defaultConfig = {};\ndefaultConfig.scale = {};\ndefaultConfig.scale.lineWidth = 3;\ndefaultConfig.scale.margin = 5;\ndefaultConfig.scale.backgroundColor = \"ffffff\";\ndefaultConfig.scale.fontSize = 15;\ndefaultConfig.scale.arrowHeadHeight = 13;\ndefaultConfig.scale.numbersMarginRight = 20;\ndefaultConfig.drawToday = true;\ndefaultConfig.drawBaseLineYear = true;\ndefaultConfig.drawTickLabels = true;\ndefaultConfig.entries = {};\ndefaultConfig.entries.colors = [\"f7c6c7\", \"fad8c7\", \"fef2c0\", \"bfe5bf\", \"bfdadc\", \"c7def8\", \"bfd4f2\", \"d4c5f9\"];\n\nclass VerticalBigBar extends Visualisation {\n    constructor(timeline, _htmlElement, _config) {\n        super(timeline, _htmlElement, !_config ? defaultConfig : _config);\n\n        //set hover style\n        var style = document.createElement(\"style\");\n        style.setAttribute(\"type\", \"text/css\");\n        var styleText = document.createTextNode(\".js_timeline_entry.hover{opacity:0.5;} .js_timeline_entry{opacity:1;}\");\n        style.appendChild(styleText);\n\n        this.masterSvg.appendChild(style);\n\n        this.lastColor = 0;\n        this.repaint();\n    }\n\n    /*\n     * VisualisationBase Implementation\n     */\n    repaint() {\n        this.updateScale();\n        this.updateTicks();\n        this.updateStartYearAndNowString();\n        this.updateArrowHead();\n        this.updateEntries();\n    }\n\n    getCenter() {\n        return this.getWidth() / 2;\n    }\n\n    getNextColor() {\n        var colorIndex = this.lastColor + 1;\n\n        if (this.config.entries.colors.length == colorIndex)\n            colorIndex = 0;\n\n        this.lastColor = colorIndex;\n\n        return this.config.entries.colors[colorIndex];\n    }\n\n    getPosForDate(date) {\n        var startTimestamp = new Date(this.timeline.getFromYear(), 0, 1).getTime();\n        var nowTimestamp = new Date().getTime();\n        var timespan = nowTimestamp - startTimestamp;\n\n        var posOnTimespan = date.getTime() - startTimestamp;\n        var percentFromStart = posOnTimespan / timespan;\n\n        var offsetTop = this.getTopOffsetForEntry();\n        var maxHeight = this.getHeightForEntry();\n\n        if (percentFromStart >= 1) {\n            return offsetTop;\n        } else if (percentFromStart <= 0) {\n            return offsetTop + maxHeight;\n        } else {\n            var pos = maxHeight - (maxHeight * percentFromStart) + offsetTop\n            return pos;\n        }\n    }\n\n\n// Height and offsets for Entry \n    getTopOffsetForEntry() {\n        var offset = this.getTopOffsetForScale();\n\n        offset += this.config.scale.arrowHeadHeight;\n\n        return offset;\n    }\n\n    getBottomOffsetForEntry() {\n        return this.getBottomOffsetForScale();\n    }\n\n    getHeightForEntry() {\n        var offset = this.getTopOffsetForEntry() + this.getBottomOffsetForScale();\n\n        return this.getHeight() - offset;\n    }\n\n// Height and offsets for Scale\n\n    getTopOffsetForScale() {\n        var offset = 0;\n\n        if (this.config.drawToday) {\n            offset += this.config.scale.fontSize + 2;\n        }\n\n        return offset;\n    }\n\n    getBottomOffsetForScale() {\n        var offset = 3;\n\n        if (this.config.drawBaseLineYear) {\n            offset += this.config.scale.fontSize + 2;\n        }\n\n        return offset;\n    }\n\n    getHeightForScale() {\n        var offset = this.getTopOffsetForScale() + this.getBottomOffsetForScale();\n\n        return this.getHeight() - offset;\n    }\n\n    /*\n     Draw methods\n     Each method keeps track of it's own elements\n    */\n    updateScale() {\n        \"use strict\";\n        var yStart = this.getTopOffsetForEntry();\n        var yEnd = this.getHeight() - this.getBottomOffsetForEntry();\n\n        var lineWidth = this.config.scale.lineWidth;\n        var margin = this.config.scale.margin;\n        var width = this.getWidth();\n        var left = margin + lineWidth;\n        var right = width - (margin + lineWidth);\n\n        if (!this.scaleLine1) {\n            this.scaleLine1 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n            this.masterSvg.appendChild(this.scaleLine1);\n            this.scaleLine2 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n            this.masterSvg.appendChild(this.scaleLine2);\n            this.scaleBackground = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n            this.masterSvg.appendChild(this.scaleBackground);\n        }\n\n        this.scaleLine1.setAttribute(\"x1\", left);\n        this.scaleLine1.setAttribute(\"y1\", yStart);\n        this.scaleLine1.setAttribute(\"x2\", left);\n        this.scaleLine1.setAttribute(\"y2\", yEnd);\n        this.scaleLine1.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + lineWidth);\n\n        this.scaleLine2.setAttribute(\"x1\", right);\n        this.scaleLine2.setAttribute(\"y1\", yStart);\n        this.scaleLine2.setAttribute(\"x2\", right);\n        this.scaleLine2.setAttribute(\"y2\", yEnd);\n        this.scaleLine2.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + lineWidth);\n\n        this.scaleBackground.setAttribute(\"y\", yStart);\n        this.scaleBackground.setAttribute(\"x\", left);\n        this.scaleBackground.setAttribute(\"height\", yEnd - yStart);\n        this.scaleBackground.setAttribute(\"width\", right - left);\n        this.scaleBackground.setAttribute(\"style\", \"fill:#\" + this.config.scale.backgroundColor + \";\");\n        this.scaleBackground.setAttribute(\"class\", \"js_timeline_entry\");\n    }\n\n//currently one tick per year\n    updateTicks() {\n        \"use strict\";\n\n        var height = this.getHeightForEntry();\n        var offsetTop = this.getTopOffsetForEntry();\n        var withLabels = this.config.drawTickLabels;\n\n        var lineWidth = this.config.scale.lineWidth;\n        var margin = this.config.scale.margin;\n        var width = this.getWidth();\n        var left = margin + lineWidth;\n        var right = width - (margin + lineWidth);\n\n        //calculate step size\n        var fromTimestamp = new Date(this.timeline.getFromYear(), 0, 1).getTime();\n        var nowTimestamp = new Date().getTime();\n        var timespan = nowTimestamp - fromTimestamp;\n        var ticks = timespan / (31536000000 + 21600000); //a year + leap\n\n        var stepSize = height / ticks;\n\n        if (this.tickSvgs) {\n            for (var index in this.tickSvgs) {\n                this.masterSvg.removeChild(this.tickSvgs[index]);\n            }\n        }\n\n        this.tickSvgs = [];\n\n        for (var i = 0; i < ticks; i += 1) {\n            var yPos = offsetTop + height - i * stepSize;\n            var line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n\n            line.setAttribute(\"x1\", left);\n            line.setAttribute(\"y1\", yPos);\n\n            line.setAttribute(\"x2\", right);\n            line.setAttribute(\"y2\", yPos);\n\n            line.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + 2);\n\n            this.tickSvgs.push(line);\n            this.masterSvg.appendChild(line);\n\n            if (withLabels && i != 0) {\n                var text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                text.setAttribute(\"x\", right - this.config.scale.numbersMarginRight);\n                text.setAttribute(\"y\", yPos + 10);\n                text.setAttribute(\"fill\", \"black\");\n                text.setAttribute(\"font-size\", \"10\");\n\n\n                var str = document.createTextNode((this.timeline.getFromYear() + i + \"\"));\n                text.appendChild(str);\n\n                this.tickSvgs.push(text);\n                this.masterSvg.appendChild(text);\n            }\n        }\n    }\n\n    updateStartYearAndNowString() {\n        \"use strict\";\n        if (this.labelSvgs) {\n            for (var index in this.labelSvgs) {\n                this.masterSvg.removeChild(this.labelSvgs[index]);\n            }\n        }\n\n        this.labelSvgs = [];\n\n        var left = this.getCenter() - 15;\n        var fontSize = this.config.scale.fontSize;\n        var fontOffset = fontSize * 0.3;\n\n        if (this.config.drawToday) {\n            var todaySvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            todaySvg.setAttribute(\"x\", left);\n            todaySvg.setAttribute(\"y\", fontOffset * 2.7);\n            todaySvg.setAttribute(\"fill\", \"black\");\n            todaySvg.setAttribute(\"font-size\", fontSize);\n\n            var todayString = document.createTextNode(\"today\");\n            todaySvg.appendChild(todayString);\n            this.labelSvgs.push(todaySvg);\n            this.masterSvg.appendChild(todaySvg);\n\n        }\n\n        if (this.config.drawBaseLineYear) {\n            var baseLineYearSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            baseLineYearSvg.setAttribute(\"x\", left);\n            baseLineYearSvg.setAttribute(\"y\", this.getHeight() - fontOffset);\n            baseLineYearSvg.setAttribute(\"fill\", \"black\");\n            baseLineYearSvg.setAttribute(\"font-size\", fontSize);\n\n            var baseLineYearString = document.createTextNode(this.timeline.getFromYear());\n            baseLineYearSvg.appendChild(baseLineYearString);\n            this.labelSvgs.push(baseLineYearSvg);\n            this.masterSvg.appendChild(baseLineYearSvg);\n\n        }\n    }\n\n    updateArrowHead() {\n        \"use strict\";\n        var topOffset = this.getTopOffsetForScale();\n        var lineWidth = 2;//this.config.scale.lineWidth;\n\n        var margin = this.config.scale.margin;\n        var width = this.getWidth();\n        var left = 1;\n        var right = width - 1;\n        var center = this.getCenter();\n\n        var arrowHeight = this.config.scale.arrowHeadHeight;\n\n        var xStart = left;\n        var yStart = arrowHeight + topOffset + 3;\n\n        var xCenter = center;\n        var yCenter = topOffset;\n\n        var xEnd = right;\n        var yEnd = arrowHeight + topOffset + 5;\n\n        if (!this.arrowHeadSvg) {\n            this.arrowHeadSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\n            this.masterSvg.appendChild(this.arrowHeadSvg);\n        }\n\n        this.arrowHeadSvg.setAttribute(\"points\", xStart + \",\" + yStart + \" \" + xCenter + \",\" + yCenter + \" \" + xEnd + \",\" + yEnd);\n        this.arrowHeadSvg.setAttribute(\"style\", \"fill:none;stroke:black;stroke-width:\" + lineWidth);\n    }\n\n    updateEntries() {\n        var allEntries = this.timeline.getTimelineEntries();\n        for (var index in this.timelineEntryVisualisationMaps) {\n            this.masterSvg.removeChild(this.timelineEntryVisualisationMaps[index]);\n        }\n\n        for (var index in allEntries) {\n            var entry = allEntries[index];\n            this.onNewTimelineEntry(entry);\n        }\n    }\n\n    getShapeForTimelineEntry(timelineEntry) {\n        //decide level\n        var takenLevels = this.timeline.getTakenLevelsInTimeRange(timelineEntry.fromDate, timelineEntry.toDate, timelineEntry);\n        var newLevel = 0;\n        while (takenLevels.indexOf(newLevel) != -1) {\n            newLevel += 1;\n        }\n\n        var level = newLevel;\n        timelineEntry.level = newLevel;\n\n        //decide color\n        if (!timelineEntry.color)\n            timelineEntry.color = this.getNextColor();\n        var color = timelineEntry.color;\n\n        //decide position\n        //y\n        var yLow = this.getPosForDate(timelineEntry.fromDate);\n        var yHigh = this.getPosForDate(timelineEntry.toDate);\n        var height = yLow - yHigh;\n\n        //x\n        var lineWidth = this.config.scale.lineWidth;\n        var margin = this.config.scale.margin;\n        var width = this.getWidth();\n        var left = margin + lineWidth;\n        left = left + level * 6;\n\n\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n        shape.setAttribute(\"y\", yHigh);\n        shape.setAttribute(\"x\", left);\n        shape.setAttribute(\"height\", height);\n        shape.setAttribute(\"width\", 5);\n        shape.setAttribute(\"style\", \"fill:#\" + color + \";stroke:black;stroke-width:1;pointer-events:all;\");\n        shape.setAttribute(\"class\", \"js_timeline_entry\");\n\n        shape.onmouseover = function (event) {\n            timelineEntry.tooltip = new Tooltip(event, timelineEntry.title);\n            shape.classList.add(\"hover\");\n\n        };\n        shape.onmouseout = function () {\n            timelineEntry.tooltip.destroyExistingTooltip();\n            shape.classList.remove(\"hover\");\n        }\n\n        return shape;\n    }\n\n}\n\n\nfunction addEvent(ele, type, func) {\n    if (ele.addEventListener) {\n        ele.addEventListener(type, func, false);\n    } else if (ele.attachEvent) {\n        ele.attachEvent(\"on\" + type, func);\n    }\n}\n\nmodule.exports = VerticalBigBar;\n\n//# sourceURL=webpack:///./js/visualisations/verticalBigBar.js?");

/***/ }),

/***/ "./js/visualisations/verticalGroupedByColor.js":
/*!*****************************************************!*\
  !*** ./js/visualisations/verticalGroupedByColor.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿const { Visualisation }= __webpack_require__(/*! ./visualisation */ \"./js/visualisations/visualisation.js\");\nconst Tooltip = __webpack_require__(/*! ../tooltip */ \"./js/tooltip.js\");\n\nconst localDefaultConfig = {};\nlocalDefaultConfig.scale = {};\nlocalDefaultConfig.scale.lineWidth = 3;\nlocalDefaultConfig.scale.margin = 5;\nlocalDefaultConfig.scale.backgroundColor = \"ffffff\";\nlocalDefaultConfig.scale.fontSize = 15;\nlocalDefaultConfig.scale.arrowHeadHeight = 13;\nlocalDefaultConfig.scale.numbersMarginRight = 20;\nlocalDefaultConfig.drawToday = true;\nlocalDefaultConfig.drawBaseLineYear = true;\nlocalDefaultConfig.drawTickLabels = true;\nlocalDefaultConfig.entries = {};\nlocalDefaultConfig.entries.colors = [\"f7c6c7\", \"fad8c7\", \"fef2c0\", \"bfe5bf\", \"bfdadc\", \"c7def8\", \"bfd4f2\", \"d4c5f9\"];\n\n\nclass VerticalGroupedByColor extends Visualisation {\n    constructor(timeline, htmlElement, config) {\n        super(timeline, htmlElement, config || localDefaultConfig);\n\n        //set hover style\n        var style = document.createElement(\"style\");\n        style.setAttribute(\"type\", \"text/css\");\n        var styleText = document.createTextNode(\".js_timeline_entry.hover{opacity:0.5;} .js_timeline_entry{opacity:1;}\");\n        style.appendChild(styleText);\n\n        this.masterSvg.appendChild(style);\n\n        this.lastColor = 0;\n        this.colorToLevelMap = {};\n        this.nextLevel = 1;\n        this.repaint();\n    }\n}\n\n/*\n * VisualisationBase Implementation\n */\nVerticalGroupedByColor.prototype.repaint = function () {\n    this.updateScale();\n    this.updateTicks();\n    this.updateStartYearAndNowString();\n    this.updateArrowHead();\n    this.updateEntries();\n}\n\nVerticalGroupedByColor.prototype.getCenter = function () {\n    return this.getWidth() / 2;\n}\n\nVerticalGroupedByColor.prototype.getNextColor = function () {\n    var colorIndex = this.lastColor + 1;\n\n    if (this.config.entries.colors.length == colorIndex)\n        colorIndex = 0;\n\n    this.lastColor = colorIndex;\n\n    return this.config.entries.colors[colorIndex];\n}\n\nVerticalGroupedByColor.prototype.getPosForDate = function (date) {\n    var startTimestamp = new Date(this.timeline.getFromYear(), 0, 1).getTime();\n    var nowTimestamp = new Date().getTime();\n    var timespan = nowTimestamp - startTimestamp;\n\n    var posOnTimespan = date.getTime() - startTimestamp;\n    var percentFromStart = posOnTimespan / timespan;\n\n    var offsetTop = this.getTopOffsetForEntry();\n    var maxHeight = this.getHeightForEntry();\n\n    if (percentFromStart >= 1) {\n        return offsetTop;\n    } else if (percentFromStart <= 0) {\n        return offsetTop + maxHeight;\n    } else {\n        var pos = maxHeight - (maxHeight * percentFromStart) + offsetTop\n        return pos;\n    }\n}\n\n\n// Height and offsets for Entry \nVerticalGroupedByColor.prototype.getTopOffsetForEntry = function () {\n    var offset = this.getTopOffsetForScale();\n\n    offset += this.config.scale.arrowHeadHeight;\n\n    return offset;\n}\n\nVerticalGroupedByColor.prototype.getBottomOffsetForEntry = function () {\n    return this.getBottomOffsetForScale();\n}\n\nVerticalGroupedByColor.prototype.getHeightForEntry = function () {\n    var offset = this.getTopOffsetForEntry() + this.getBottomOffsetForScale();\n\n    return this.getHeight() - offset;\n}\n\n// Height and offsets for Scale\n\nVerticalGroupedByColor.prototype.getTopOffsetForScale = function () {\n    var offset = 0;\n\n    if (this.config.drawToday) {\n        offset += this.config.scale.fontSize + 2;\n    }\n\n    return offset;\n}\n\nVerticalGroupedByColor.prototype.getBottomOffsetForScale = function () {\n    var offset = 3;\n\n    if (this.config.drawBaseLineYear) {\n        offset += this.config.scale.fontSize + 2;\n    }\n\n    return offset;\n}\n\nVerticalGroupedByColor.prototype.getHeightForScale = function () {\n    var offset = this.getTopOffsetForScale() + this.getBottomOffsetForScale();\n\n    return this.getHeight() - offset;\n}\n\n/*\n Draw methods\n Each method keeps track of it's own elements\n*/\nVerticalGroupedByColor.prototype.updateScale = function () {\n    \"use strict\";\n    var yStart = this.getTopOffsetForEntry();\n    var yEnd = this.getHeight() - this.getBottomOffsetForEntry();\n\n    var lineWidth = this.config.scale.lineWidth;\n    var margin = this.config.scale.margin;\n    var width = this.getWidth();\n    var left = margin + lineWidth;\n    var right = width - (margin + lineWidth);\n\n    if (!this.scaleLine1) {\n        this.scaleLine1 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        this.masterSvg.appendChild(this.scaleLine1);\n        this.scaleLine2 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        this.masterSvg.appendChild(this.scaleLine2);\n        this.scaleBackground = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n        this.masterSvg.appendChild(this.scaleBackground);\n    }\n\n    this.scaleLine1.setAttribute(\"x1\", left);\n    this.scaleLine1.setAttribute(\"y1\", yStart);\n    this.scaleLine1.setAttribute(\"x2\", left);\n    this.scaleLine1.setAttribute(\"y2\", yEnd);\n    this.scaleLine1.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + lineWidth);\n\n    this.scaleLine2.setAttribute(\"x1\", right);\n    this.scaleLine2.setAttribute(\"y1\", yStart);\n    this.scaleLine2.setAttribute(\"x2\", right);\n    this.scaleLine2.setAttribute(\"y2\", yEnd);\n    this.scaleLine2.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + lineWidth);\n\n    this.scaleBackground.setAttribute(\"y\", yStart);\n    this.scaleBackground.setAttribute(\"x\", left);\n    this.scaleBackground.setAttribute(\"height\", yEnd - yStart);\n    this.scaleBackground.setAttribute(\"width\", right - left);\n    this.scaleBackground.setAttribute(\"style\", \"fill:#\" + this.config.scale.backgroundColor + \";\");\n    this.scaleBackground.setAttribute(\"class\", \"js_timeline_entry\");\n}\n\n//currently one tick per year\nVerticalGroupedByColor.prototype.updateTicks = function () {\n    \"use strict\";\n\n    var height = this.getHeightForEntry();\n    var offsetTop = this.getTopOffsetForEntry();\n    var withLabels = this.config.drawTickLabels;\n\n    var lineWidth = this.config.scale.lineWidth;\n    var margin = this.config.scale.margin;\n    var width = this.getWidth();\n    var left = margin + lineWidth;\n    var right = width - (margin + lineWidth);\n\n    //calculate step size\n    var fromTimestamp = new Date(this.timeline.getFromYear(), 0, 1).getTime();\n    var nowTimestamp = new Date().getTime();\n    var timespan = nowTimestamp - fromTimestamp;\n    var ticks = timespan / (31536000000 + 21600000); //a year + leap\n\n    var stepSize = height / ticks;\n\n    if (this.tickSvgs) {\n        for (var index in this.tickSvgs) {\n            this.masterSvg.removeChild(this.tickSvgs[index]);\n        }\n    }\n\n    this.tickSvgs = [];\n\n    for (var i = 0; i < ticks; i += 1) {\n        var yPos = offsetTop + height - i * stepSize;\n        var line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n\n        line.setAttribute(\"x1\", left);\n        line.setAttribute(\"y1\", yPos);\n\n        line.setAttribute(\"x2\", right);\n        line.setAttribute(\"y2\", yPos);\n\n        line.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + 2);\n\n        this.tickSvgs.push(line);\n        this.masterSvg.appendChild(line);\n\n        if (withLabels && i != 0) {\n            var text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            text.setAttribute(\"x\", right - this.config.scale.numbersMarginRight);\n            text.setAttribute(\"y\", yPos + 10);\n            text.setAttribute(\"fill\", \"black\");\n            text.setAttribute(\"font-size\", \"10\");\n\n\n            var str = document.createTextNode((this.timeline.getFromYear() + i + \"\"));\n            text.appendChild(str);\n\n            this.tickSvgs.push(text);\n            this.masterSvg.appendChild(text);\n        }\n    }\n}\n\nVerticalGroupedByColor.prototype.updateStartYearAndNowString = function () {\n    \"use strict\";\n    if (this.labelSvgs) {\n        for (var index in this.labelSvgs) {\n            this.masterSvg.removeChild(this.labelSvgs[index]);\n        }\n    }\n\n    this.labelSvgs = [];\n\n    var left = this.getCenter() - 15;\n    var fontSize = this.config.scale.fontSize;\n    var fontOffset = fontSize * 0.3;\n\n    if (this.config.drawToday) {\n        var todaySvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        todaySvg.setAttribute(\"x\", left);\n        todaySvg.setAttribute(\"y\", fontOffset * 2.7);\n        todaySvg.setAttribute(\"fill\", \"black\");\n        todaySvg.setAttribute(\"font-size\", fontSize);\n\n        var todayString = document.createTextNode(\"today\");\n        todaySvg.appendChild(todayString);\n        this.labelSvgs.push(todaySvg);\n        this.masterSvg.appendChild(todaySvg);\n\n    }\n\n    if (this.config.drawBaseLineYear) {\n        var baseLineYearSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        baseLineYearSvg.setAttribute(\"x\", left);\n        baseLineYearSvg.setAttribute(\"y\", this.getHeight() - fontOffset);\n        baseLineYearSvg.setAttribute(\"fill\", \"black\");\n        baseLineYearSvg.setAttribute(\"font-size\", fontSize);\n\n        var baseLineYearString = document.createTextNode(this.timeline.getFromYear());\n        baseLineYearSvg.appendChild(baseLineYearString);\n        this.labelSvgs.push(baseLineYearSvg);\n        this.masterSvg.appendChild(baseLineYearSvg);\n\n    }\n}\n\nVerticalGroupedByColor.prototype.updateArrowHead = function () {\n    \"use strict\";\n    var topOffset = this.getTopOffsetForScale();\n    var lineWidth = 2;//this.config.scale.lineWidth;\n\n    var margin = this.config.scale.margin;\n    var width = this.getWidth();\n    var left = 1;\n    var right = width - 1;\n    var center = this.getCenter();\n\n    var arrowHeight = this.config.scale.arrowHeadHeight;\n\n    var xStart = left;\n    var yStart = arrowHeight + topOffset + 3;\n\n    var xCenter = center;\n    var yCenter = topOffset;\n\n    var xEnd = right;\n    var yEnd = arrowHeight + topOffset + 5;\n\n    if (!this.arrowHeadSvg) {\n        this.arrowHeadSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\n        this.masterSvg.appendChild(this.arrowHeadSvg);\n    }\n\n    this.arrowHeadSvg.setAttribute(\"points\", xStart + \",\" + yStart + \" \" + xCenter + \",\" + yCenter + \" \" + xEnd + \",\" + yEnd);\n    this.arrowHeadSvg.setAttribute(\"style\", \"fill:none;stroke:black;stroke-width:\" + lineWidth);\n}\n\nVerticalGroupedByColor.prototype.updateEntries = function () {\n    var allEntries = this.timeline.getTimelineEntries();\n    for (var index in this.timelineEntryVisualisationMaps) {\n        this.masterSvg.removeChild(this.timelineEntryVisualisationMaps[index]);\n    }\n\n    for (var index in allEntries) {\n        var entry = allEntries[index];\n        this.onNewTimelineEntry(entry);\n    }\n}\n\nVerticalGroupedByColor.prototype.getShapeForTimelineEntry = function (timelineEntry) {\n    //decide level\n    let level = this.colorToLevelMap[timelineEntry.color];\n    if (level == null) {\n        this.colorToLevelMap[timelineEntry.color] = this.nextLevel;\n        level = this.nextLevel;\n        this.nextLevel += 1;\n    }\n\n    timelineEntry.level = level;\n\n    //decide color\n    if (!timelineEntry.color)\n        timelineEntry.color = this.getNextColor();\n    var color = timelineEntry.color;\n\n    //decide position\n    //y\n    var yLow = this.getPosForDate(timelineEntry.fromDate);\n    var yHigh = this.getPosForDate(timelineEntry.toDate);\n    var height = yLow - yHigh;\n\n    //x\n    var lineWidth = this.config.scale.lineWidth;\n    var margin = this.config.scale.margin;\n    var width = this.getWidth();\n    var left = margin + lineWidth;\n    left = left + level * 11;\n\n\n    var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n    shape.setAttribute(\"y\", yHigh);\n    shape.setAttribute(\"x\", left);\n    shape.setAttribute(\"height\", height);\n    shape.setAttribute(\"width\", 10);\n    shape.setAttribute(\"style\", \"fill:#\" + color + \";stroke:black;stroke-width:1;pointer-events:all;\");\n    shape.setAttribute(\"class\", \"js_timeline_entry\");\n\n    shape.onmouseover = function (event) {\n        timelineEntry.tooltip = new Tooltip(event, timelineEntry.title);\n        shape.classList.add(\"hover\");\n\n    };\n    shape.onmouseout = function () {\n        timelineEntry.tooltip.destroyExistingTooltip();\n        shape.classList.remove(\"hover\");\n    }\n\n    return shape;\n}\n\n\nfunction addEvent(ele, type, func) {\n    if (ele.addEventListener) {\n        ele.addEventListener(type, func, false);\n    } else if (ele.attachEvent) {\n        ele.attachEvent(\"on\" + type, func);\n    }\n}\n\nmodule.exports = VerticalGroupedByColor;\n\n//# sourceURL=webpack:///./js/visualisations/verticalGroupedByColor.js?");

/***/ }),

/***/ "./js/visualisations/verticalMinimal.js":
/*!**********************************************!*\
  !*** ./js/visualisations/verticalMinimal.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿const { Visualisation }= __webpack_require__(/*! ./visualisation */ \"./js/visualisations/visualisation.js\");\nconst Tooltip = __webpack_require__(/*! ../tooltip */ \"./js/tooltip.js\");\n\nvar defaultConfig = {};\ndefaultConfig.scale = {};\ndefaultConfig.scale.lineWidth = 3;\ndefaultConfig.scale.margin = 5;\ndefaultConfig.scale.backgroundColor = \"ffffff\";\ndefaultConfig.scale.fontSize = 15;\ndefaultConfig.scale.numbersMarginRight = 20;\ndefaultConfig.drawBaseLineYear = true;\ndefaultConfig.drawTickLabels = true;\ndefaultConfig.entries = {};\ndefaultConfig.entries.colors = [\"f7c6c7\", \"fad8c7\", \"fef2c0\", \"bfe5bf\", \"bfdadc\", \"c7def8\", \"bfd4f2\", \"d4c5f9\"];\n\nclass VerticalMinimal extends Visualisation {\n\n\n    constructor(timeline, _htmlElement, _config) {\n        super(timeline, _htmlElement, !_config ? defaultConfig : _config);\n\n        //set hover style\n        var style = document.createElement(\"style\");\n        style.setAttribute(\"type\", \"text/css\");\n        var styleText = document.createTextNode(\".js_timeline_entry_\" + this.id + \".hover{stroke-width:1;stroke:black;}\");\n        style.appendChild(styleText);\n\n        this.masterSvg.appendChild(style);\n\n        this.lastColor = 0;\n        this.repaint();\n    }\n\n    /*\n     * VisualisationBase Implementation\n     */\n    repaint() {\n        this.updateTicks();\n        this.updateStartYear();\n        this.updateEntries();\n    }\n\n    getCenter() {\n        return this.getWidth() / 2;\n    }\n\n    getNextColor() {\n        var colorIndex = this.lastColor + 1;\n\n        if (this.config.entries.colors.length == colorIndex)\n            colorIndex = 0;\n\n        this.lastColor = colorIndex;\n\n        return this.config.entries.colors[colorIndex];\n    }\n\n    getPosForDate(date) {\n        var startTimestamp = new Date(this.timeline.getFromYear(), 0, 1).getTime();\n        var nowTimestamp = new Date().getTime();\n        var timespan = nowTimestamp - startTimestamp;\n\n        var posOnTimespan = date.getTime() - startTimestamp;\n        var percentFromStart = posOnTimespan / timespan;\n\n        var offsetTop = this.getTopOffsetForEntry();\n        var maxHeight = this.getHeightForEntry();\n\n        if (percentFromStart >= 1) {\n            return offsetTop;\n        } else if (percentFromStart <= 0) {\n            return offsetTop + maxHeight;\n        } else {\n            var pos = maxHeight - (maxHeight * percentFromStart) + offsetTop\n            return pos;\n        }\n    }\n\n\n// Height and offsets for Entry \n    getTopOffsetForEntry() {\n        var offset = this.getTopOffsetForScale();\n\n        return offset;\n    }\n\n    getBottomOffsetForEntry() {\n        return this.getBottomOffsetForScale();\n    }\n\n    getHeightForEntry() {\n        var offset = this.getTopOffsetForEntry() + this.getBottomOffsetForScale();\n\n        return this.getHeight() - offset;\n    }\n\n// Height and offsets for Scale\n\n    getTopOffsetForScale() {\n        return 0;\n    }\n\n    getBottomOffsetForScale() {\n        var offset = 3;\n\n        if (this.config.drawBaseLineYear) {\n            offset += this.config.scale.fontSize + 2;\n        }\n\n        return offset;\n    }\n\n    getHeightForScale() {\n        var offset = this.getTopOffsetForScale() + this.getBottomOffsetForScale();\n\n        return this.getHeight() - offset;\n    }\n\n    /*\n     Draw methods\n     Each method keeps track of it's own elements\n    */\n\n//currently one tick per year\n    updateTicks() {\n        \"use strict\";\n\n        var height = this.getHeightForEntry();\n        var offsetTop = this.getTopOffsetForEntry();\n        var withLabels = this.config.drawTickLabels;\n\n        var lineWidth = this.config.scale.lineWidth;\n        var margin = this.config.scale.margin;\n        var width = this.getWidth();\n        var left = margin + lineWidth;\n        var right = width - (margin + lineWidth);\n\n        //calculate step size\n        var fromTimestamp = new Date(this.timeline.getFromYear(), 0, 1).getTime();\n        var nowTimestamp = new Date().getTime();\n        var timespan = nowTimestamp - fromTimestamp;\n        var ticks = timespan / (31536000000 + 21600000); //a year + leap\n\n        var stepSize = height / ticks;\n\n        if (this.tickSvgs) {\n            for (var index in this.tickSvgs) {\n                this.masterSvg.removeChild(this.tickSvgs[index]);\n            }\n        }\n\n        this.tickSvgs = [];\n\n        for (var i = 0; i < ticks; i += 1) {\n            var yPos = offsetTop + height - i * stepSize;\n            var line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n\n            line.setAttribute(\"x1\", left);\n            line.setAttribute(\"y1\", yPos);\n\n            line.setAttribute(\"x2\", right);\n            line.setAttribute(\"y2\", yPos);\n\n            line.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + 1);\n\n            this.tickSvgs.push(line);\n            this.masterSvg.appendChild(line);\n\n            if (withLabels && i != 0) {\n                var text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                text.setAttribute(\"x\", right - this.config.scale.numbersMarginRight);\n                text.setAttribute(\"y\", yPos + 10);\n                text.setAttribute(\"fill\", \"black\");\n                text.setAttribute(\"font-size\", \"10\");\n\n\n                var str = document.createTextNode((this.timeline.getFromYear() + i + \"\"));\n                text.appendChild(str);\n\n                this.tickSvgs.push(text);\n                this.masterSvg.appendChild(text);\n            }\n        }\n    }\n\n    updateStartYear() {\n        \"use strict\";\n        if (this.labelSvgs) {\n            for (var index in this.labelSvgs) {\n                this.masterSvg.removeChild(this.labelSvgs[index]);\n            }\n        }\n\n        this.labelSvgs = [];\n\n        var left = this.getCenter() - 15;\n        var fontSize = this.config.scale.fontSize;\n        var fontOffset = fontSize * 0.3;\n\n        if (this.config.drawBaseLineYear) {\n            var baseLineYearSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            baseLineYearSvg.setAttribute(\"x\", left);\n            baseLineYearSvg.setAttribute(\"y\", this.getHeight() - fontOffset);\n            baseLineYearSvg.setAttribute(\"fill\", \"black\");\n            baseLineYearSvg.setAttribute(\"font-size\", fontSize);\n\n            var baseLineYearString = document.createTextNode(this.timeline.getFromYear());\n            baseLineYearSvg.appendChild(baseLineYearString);\n            this.labelSvgs.push(baseLineYearSvg);\n            this.masterSvg.appendChild(baseLineYearSvg);\n\n        }\n    }\n\n    updateEntries() {\n        var allEntries = this.timeline.getTimelineEntries();\n        for (var index in this.timelineEntryVisualisationMaps) {\n            this.masterSvg.removeChild(this.timelineEntryVisualisationMaps[index]);\n        }\n\n        for (var index in allEntries) {\n            var entry = allEntries[index];\n            this.onNewTimelineEntry(entry);\n        }\n    }\n\n    getShapeForTimelineEntry(timelineEntry) {\n        //decide level\n        var takenLevels = this.timeline.getTakenLevelsInTimeRange(timelineEntry.fromDate, timelineEntry.toDate, timelineEntry);\n        var newLevel = 0;\n        while (takenLevels.indexOf(newLevel) != -1) {\n            newLevel += 1;\n        }\n\n        var level = newLevel;\n        timelineEntry.level = newLevel;\n\n        //decide color\n        if (!timelineEntry.color)\n            timelineEntry.color = this.getNextColor();\n        var color = timelineEntry.color;\n\n        //decide position\n        //y\n        var yLow = this.getPosForDate(timelineEntry.fromDate);\n        var yHigh = this.getPosForDate(timelineEntry.toDate);\n        var height = yLow - yHigh;\n\n        //x\n        var lineWidth = this.config.scale.lineWidth;\n        var margin = this.config.scale.margin;\n        var width = this.getWidth();\n        var left = margin + lineWidth;\n        left = left + level * 6;\n\n\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n        shape.setAttribute(\"y\", yHigh);\n        shape.setAttribute(\"x\", left);\n        shape.setAttribute(\"height\", height);\n        shape.setAttribute(\"width\", 5);\n        shape.setAttribute(\"style\", \"fill:#\" + color + \";pointer-events:all;\");\n        shape.setAttribute(\"class\", \"js_timeline_entry_\" + this.id);\n\n        shape.onmouseover = function (event) {\n            timelineEntry.tooltip = new Tooltip(event, timelineEntry.title);\n            shape.classList.add(\"hover\");\n\n        };\n        shape.onmouseout = function () {\n            timelineEntry.tooltip.destroyExistingTooltip();\n            shape.classList.remove(\"hover\");\n        }\n\n        return shape;\n    }\n\n\n}\n\nfunction addEvent(ele, type, func) {\n    if (ele.addEventListener) {\n        ele.addEventListener(type, func, false);\n    } else if (ele.attachEvent) {\n        ele.attachEvent(\"on\" + type, func);\n    }\n}\n\nmodule.exports = VerticalMinimal;\n\n//# sourceURL=webpack:///./js/visualisations/verticalMinimal.js?");

/***/ }),

/***/ "./js/visualisations/verticalSmallBar.js":
/*!***********************************************!*\
  !*** ./js/visualisations/verticalSmallBar.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿const { Visualisation }= __webpack_require__(/*! ./visualisation */ \"./js/visualisations/visualisation.js\");\nconst Tooltip = __webpack_require__(/*! ../tooltip */ \"./js/tooltip.js\");\n\nvar defaultConfig = {};\ndefaultConfig.scale = {};\ndefaultConfig.scale.lineWidth = 3;\ndefaultConfig.scale.fontSize = 15;\ndefaultConfig.scale.arrowHeadHeight = 13;\ndefaultConfig.scale.arrowHeadWidth = 20;\ndefaultConfig.drawToday = true;\ndefaultConfig.drawBaseLineYear = true;\ndefaultConfig.drawTickLabels = true;\ndefaultConfig.entries = {};\ndefaultConfig.entries.colors = [\"f7c6c7\", \"fad8c7\", \"fef2c0\", \"bfe5bf\", \"bfdadc\", \"c7def8\", \"bfd4f2\", \"d4c5f9\"];\n\nclass VerticalSmallBar extends Visualisation {\n    constructor(timeline, _htmlElement, _config) {\n        super(timeline, _htmlElement, !_config ? defaultConfig : _config);\n\n        //set hover style\n        var style = document.createElement(\"style\");\n        style.setAttribute(\"type\", \"text/css\");\n        var styleText = document.createTextNode(\".js_timeline_entry.hover{opacity:0.5;} .js_timeline_entry{opacity:1;}\");\n        style.appendChild(styleText);\n\n        this.masterSvg.appendChild(style);\n\n        this.lastColor = 0;\n        this.repaint();\n    }\n\n    /*\n     * VisualisationBase Implementation\n     */\n    repaint() {\n        this.updateScale();\n        this.updateTicks();\n        this.updateStartYearAndNowString();\n        this.updateArrowHead();\n        this.updateEntries();\n    }\n\n    getCenter() {\n        var realCenter = this.getWidth() / 2;\n        var usedCenter = realCenter * 0.9;\n        return usedCenter;\n    }\n\n    getNextColor() {\n        var colorIndex = this.lastColor + 1;\n\n        if (this.config.entries.colors.length == colorIndex)\n            colorIndex = 0;\n\n        this.lastColor = colorIndex;\n\n        return this.config.entries.colors[colorIndex];\n    }\n\n    getPosForDate(date) {\n        var startTimestamp = new Date(this.timeline.getFromYear(), 0, 1).getTime();\n        var nowTimestamp = new Date().getTime();\n        var timespan = nowTimestamp - startTimestamp;\n\n        var posOnTimespan = date.getTime() - startTimestamp;\n        var percentFromStart = posOnTimespan / timespan;\n\n        var offsetTop = this.getTopOffsetForEntry();\n        var maxHeight = this.getHeightForEntry();\n\n        if (percentFromStart >= 1) {\n            return offsetTop;\n        } else if (percentFromStart <= 0) {\n            return offsetTop + maxHeight;\n        } else {\n            var pos = maxHeight - (maxHeight * percentFromStart) + offsetTop\n            return pos;\n        }\n    }\n\n\n// Height and offsets for Entry \n    getTopOffsetForEntry() {\n        var offset = this.getTopOffsetForScale();\n\n        offset += this.config.scale.arrowHeadHeight + 2;\n\n        return offset;\n    }\n\n    getBottomOffsetForEntry() {\n        return this.getBottomOffsetForScale();\n    }\n\n    getHeightForEntry() {\n        var offset = this.getTopOffsetForEntry() + this.getBottomOffsetForScale();\n\n        return this.getHeight() - offset;\n    }\n\n// Height and offsets for Scale\n\n    getTopOffsetForScale() {\n        var offset = 0;\n\n        if (this.config.drawToday) {\n            offset += this.config.scale.fontSize + 2;\n        }\n\n        return offset;\n    }\n\n    getBottomOffsetForScale() {\n        var offset = 3;\n\n        if (this.config.drawBaseLineYear) {\n            offset += this.config.scale.fontSize + 2;\n        }\n\n        return offset;\n    }\n\n    getHeightForScale() {\n        var offset = this.getTopOffsetForScale() + this.getBottomOffsetForScale();\n\n        return this.getHeight() - offset;\n    }\n\n    /*\n     Draw methods\n     Each method keeps track of it's own elements\n    */\n    updateScale() {\n        \"use strict\";\n        var yStart = this.getTopOffsetForScale();\n        var yEnd = this.getHeight() - this.getBottomOffsetForScale();\n\n        var lineWidth = this.config.scale.lineWidth;\n        var center = this.getCenter();\n\n        if (!this.scaleLine) {\n            this.scaleLine = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n            this.masterSvg.appendChild(this.scaleLine);\n        }\n\n\n        this.scaleLine.setAttribute(\"x1\", center);\n        this.scaleLine.setAttribute(\"y1\", yStart);\n\n        this.scaleLine.setAttribute(\"x2\", center);\n        this.scaleLine.setAttribute(\"y2\", yEnd);\n\n        this.scaleLine.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + lineWidth);\n    }\n\n//currently one tick per year\n    updateTicks() {\n        \"use strict\";\n\n        var height = this.getHeightForEntry();\n        var offsetTop = this.getTopOffsetForEntry();\n        var withLabels = this.config.drawTickLabels;\n\n        var center = this.getCenter();\n        var widthHalf = 8;\n\n        //calculate step size\n        var fromTimestamp = new Date(this.timeline.getFromYear(), 0, 1).getTime();\n        var nowTimestamp = new Date().getTime();\n        var timespan = nowTimestamp - fromTimestamp;\n        var ticks = timespan / (31536000000 + 21600000); //a year + leap\n\n        var stepSize = height / ticks;\n\n        if (this.tickSvgs) {\n            for (var index in this.tickSvgs) {\n                this.masterSvg.removeChild(this.tickSvgs[index]);\n            }\n        }\n\n        this.tickSvgs = [];\n\n        for (var i = 0; i < ticks; i += 1) {\n            var yPos = offsetTop + height - i * stepSize;\n            var line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n\n            line.setAttribute(\"x1\", center - widthHalf);\n            line.setAttribute(\"y1\", yPos);\n\n            line.setAttribute(\"x2\", center + widthHalf);\n            line.setAttribute(\"y2\", yPos);\n\n            line.setAttribute(\"style\", \"stroke:rgb(0,0,0);stroke-width:\" + 2);\n\n            this.tickSvgs.push(line);\n            this.masterSvg.appendChild(line);\n\n            if (withLabels && i != 0) {\n                var text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n                text.setAttribute(\"x\", center + 3);\n                text.setAttribute(\"y\", yPos + 10);\n                text.setAttribute(\"fill\", \"black\");\n                text.setAttribute(\"font-size\", \"10\");\n\n\n                var str = document.createTextNode((this.timeline.getFromYear() + i + \"\"));\n                text.appendChild(str);\n\n                this.tickSvgs.push(text);\n                this.masterSvg.appendChild(text);\n            }\n        }\n    }\n\n    updateStartYearAndNowString() {\n        \"use strict\";\n        if (this.labelSvgs) {\n            for (var index in this.labelSvgs) {\n                this.masterSvg.removeChild(this.labelSvgs[index]);\n            }\n        }\n\n        this.labelSvgs = [];\n\n        var left = this.getCenter() - 15;\n        var fontSize = this.config.scale.fontSize;\n        var fontOffset = fontSize * 0.3;\n\n        if (this.config.drawToday) {\n            var todaySvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            todaySvg.setAttribute(\"x\", left);\n            todaySvg.setAttribute(\"y\", fontOffset * 2.7);\n            todaySvg.setAttribute(\"fill\", \"black\");\n            todaySvg.setAttribute(\"font-size\", fontSize);\n\n            var todayString = document.createTextNode(\"today\");\n            todaySvg.appendChild(todayString);\n            this.labelSvgs.push(todaySvg);\n            this.masterSvg.appendChild(todaySvg);\n\n        }\n\n        if (this.config.drawBaseLineYear) {\n            var baseLineYearSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n            baseLineYearSvg.setAttribute(\"x\", left);\n            baseLineYearSvg.setAttribute(\"y\", this.getHeight() - fontOffset);\n            baseLineYearSvg.setAttribute(\"fill\", \"black\");\n            baseLineYearSvg.setAttribute(\"font-size\", fontSize);\n\n            var baseLineYearString = document.createTextNode(this.timeline.getFromYear());\n            baseLineYearSvg.appendChild(baseLineYearString);\n            this.labelSvgs.push(baseLineYearSvg);\n            this.masterSvg.appendChild(baseLineYearSvg);\n\n        }\n    }\n\n    updateArrowHead() {\n        \"use strict\";\n        var topOffset = this.getTopOffsetForScale();\n        var lineWidth = this.config.scale.lineWidth;\n\n        var center = this.getCenter();\n\n        var width = this.config.scale.arrowHeadWidth;\n        var widthHalf = width / 2;\n\n        var arrowHeight = this.config.scale.arrowHeadHeight;\n\n        var xStart = center - widthHalf;\n        var yStart = arrowHeight + topOffset;\n\n        var xCenter = center;\n        var yCenter = topOffset;\n\n        var xEnd = center + widthHalf;\n        var yEnd = arrowHeight + topOffset;\n\n        if (!this.arrowHeadSvg) {\n            this.arrowHeadSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\n            this.masterSvg.appendChild(this.arrowHeadSvg);\n        }\n\n        this.arrowHeadSvg.setAttribute(\"points\", xStart + \",\" + yStart + \" \" + xCenter + \",\" + yCenter + \" \" + xEnd + \",\" + yEnd);\n        this.arrowHeadSvg.setAttribute(\"style\", \"fill:none;stroke:black;stroke-width:\" + lineWidth);\n    }\n\n    updateEntries() {\n        var allEntries = this.timeline.getTimelineEntries();\n        for (var index in this.timelineEntryVisualisationMaps) {\n            this.masterSvg.removeChild(this.timelineEntryVisualisationMaps[index]);\n        }\n\n        for (var index in allEntries) {\n            var entry = allEntries[index];\n            this.onNewTimelineEntry(entry);\n        }\n    }\n\n    getShapeForTimelineEntry(timelineEntry) {\n        //decide level\n        var takenLevels = this.timeline.getTakenLevelsInTimeRange(timelineEntry.fromDate, timelineEntry.toDate, timelineEntry);\n        //decide color\n        if (!timelineEntry.color)\n            timelineEntry.color = this.getNextColor();\n        var color = timelineEntry.color;\n        var newLevel = 0;\n        while (takenLevels.indexOf(newLevel) != -1) {\n            newLevel += 1;\n        }\n\n        var level = newLevel;\n        timelineEntry.level = newLevel;\n\n        var yLow = this.getPosForDate(timelineEntry.fromDate);\n        var yHigh = this.getPosForDate(timelineEntry.toDate);\n        var height = yLow - yHigh;\n\n        var width = this.getWidth();\n        var timelineCenter = this.getCenter();\n\n        var left = 0;\n        if (newLevel % 2 == 0) { //on right side\n            left = timelineCenter + 1 + 6 * (newLevel / 2);\n\n        } else { //on left side\n            left = timelineCenter - 7 - 6 * ((newLevel - 1) / 2);\n        }\n\n\n        var shape = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n        shape.setAttribute(\"y\", yHigh);\n        shape.setAttribute(\"x\", left);\n        shape.setAttribute(\"height\", height);\n        shape.setAttribute(\"width\", 5);\n        shape.setAttribute(\"style\", \"fill:#\" + color + \";stroke:black;stroke-width:1;pointer-events:all;\");\n        shape.setAttribute(\"class\", \"js_timeline_entry\");\n\n        shape.onmouseover = function (event) {\n            timelineEntry.tooltip = new Tooltip(event, timelineEntry.title);\n            shape.classList.add(\"hover\");\n\n        };\n        shape.onmouseout = function () {\n            timelineEntry.tooltip.destroyExistingTooltip();\n            shape.classList.remove(\"hover\");\n        }\n\n        return shape;\n    }\n}\n\nfunction addEvent(ele, type, func) {\n    if (ele.addEventListener) {\n        ele.addEventListener(type, func, false);\n    } else if (ele.attachEvent) {\n        ele.attachEvent(\"on\" + type, func);\n    }\n}\n\nmodule.exports = VerticalSmallBar;\n\n//# sourceURL=webpack:///./js/visualisations/verticalSmallBar.js?");

/***/ }),

/***/ "./js/visualisations/visualisation.js":
/*!********************************************!*\
  !*** ./js/visualisations/visualisation.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("﻿/*\n\nAuthor:\n    Julius Seltenheim (mail@julius-seltenheim.com)\n    \n*/\n\nclass Visualisation {\n    constructor(timeline, htmlElement, config) {\n        this.timeline = timeline;\n        this.htmlElement = htmlElement;\n        this.timelineEntryVisualisationMaps = {};\n        this.config = config == null ? {} : config;\n\n        //make sure element is empty\n        while (this.htmlElement.firstChild) {\n            this.htmlElement.removeChild(this.htmlElement.firstChild);\n        }\n\n        this.masterSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        this.masterSvg.setAttribute(\"style\", \"position:absolute;left:0px;top:0px;width:100%;height:100%;\");\n\n        this.id = new Date().getTime();\n\n        this.htmlElement.appendChild(this.masterSvg);\n    }\n\n    getWidth() {\n        return this.htmlElement.clientWidth;\n    }\n\n    getHeight() {\n        return this.htmlElement.clientHeight;\n    }\n\n    getConfig() {\n        return this.config;\n    }\n\n    getHTMLElement() {\n        return this.htmlElement;\n    }\n\n    /*\n     * Abstract Methods\n     */\n    repaint() {\n        throw new Error(\"NotImplementedException\");\n    }\n\n    getShapeForTimelineEntry() {\n        throw new Error(\"NotImplementedException\");\n    }\n\n\n    /*\n     * Implemented listeners\n     */\n    onNewTimelineEntry(timelineEntry) {\n        var shape = this.getShapeForTimelineEntry(timelineEntry);\n        this.timelineEntryVisualisationMaps[timelineEntry.getHash()] = shape;\n\n        for (var index in timelineEntry.highlightingHtmlElements) {\n            this.onHTMLElementToTriggerHoverAdded(timelineEntry, timelineEntry.highlightingHtmlElements[index]);\n        }\n\n        this.masterSvg.appendChild(shape);\n    }\n\n    onHTMLElementToTriggerHoverAdded(timelineEntry, htmlElement) {\n        var shape = this.timelineEntryVisualisationMaps[timelineEntry.getHash()];\n        addEvent(htmlElement, \"mouseover\", function (event) {\n            shape.classList.add(\"hover\");\n\n        });\n\n        addEvent(htmlElement, \"mouseout\", function (event) {\n            shape.classList.remove(\"hover\");\n\n        });\n    }\n}\n\nfunction addEvent(ele, type, func) {\n    if (ele.addEventListener) {\n        ele.addEventListener(type, func, false);\n    } else if (ele.attachEvent) {\n        ele.attachEvent(\"on\" + type, func);\n    }\n}\n\nmodule.exports = { Visualisation };\n\n\n//# sourceURL=webpack:///./js/visualisations/visualisation.js?");

/***/ })

/******/ });